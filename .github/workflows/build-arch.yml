name: Build Cross-Platform Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: chromecast_dlna_finder_linux
            asset_name: chromecast_dlna_finder_linux
          - os: windows-latest
            output_name: chromecast_dlna_finder_windows.exe
            asset_name: chromecast_dlna_finder_windows
          - os: macos-latest
            output_name: chromecast_dlna_finder_macos
            asset_name: chromecast_dlna_finder_macos

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
      
      - name: Get version
        id: get_version
        run: |
          # Always get version from pubspec.yaml as the primary source
          VERSION=$(grep -m 1 'version:' pubspec.yaml | awk '{print $2}' | tr -d "'\"")
          echo "Using version from pubspec.yaml: $VERSION"
          # Only for display purposes, show if tag version is different
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION=${TAG_VERSION#v}
            if [[ "$TAG_VERSION" != "$VERSION" ]]; then
              echo "Note: Tag version ($TAG_VERSION) differs from pubspec.yaml version ($VERSION)"
              echo "Using pubspec.yaml version for consistency with pub.dev"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Install dependencies
        run: dart pub get
      
      - name: Create resources directory
        run: mkdir -p resources
        shell: bash
      
      - name: Copy locale files
        run: cp -r lib/src/locales/* resources/
        shell: bash
      
      - name: Build executable
        run: dart compile exe bin/chromecast_dlna_finder.dart -o ${{ matrix.output_name }}
      
      # Create platform-specific zip archives with resources
      - name: Package Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir ${{ matrix.asset_name }}-${{ env.VERSION }}
          cp ${{ matrix.output_name }} ${{ matrix.asset_name }}-${{ env.VERSION }}/
          cp -r resources ${{ matrix.asset_name }}-${{ env.VERSION }}/
          7z a ${{ matrix.asset_name }}-${{ env.VERSION }}.zip ${{ matrix.asset_name }}-${{ env.VERSION }}
        shell: bash
      
      - name: Package MacOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir ${{ matrix.asset_name }}-${{ env.VERSION }}
          cp ${{ matrix.output_name }} ${{ matrix.asset_name }}-${{ env.VERSION }}/
          cp -r resources ${{ matrix.asset_name }}-${{ env.VERSION }}/
          zip -r ${{ matrix.asset_name }}-${{ env.VERSION }}.zip ${{ matrix.asset_name }}-${{ env.VERSION }}
        shell: bash
      
      - name: Package Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ${{ matrix.asset_name }}-${{ env.VERSION }}
          cp ${{ matrix.output_name }} ${{ matrix.asset_name }}-${{ env.VERSION }}/
          cp -r resources ${{ matrix.asset_name }}-${{ env.VERSION }}/
          zip -r ${{ matrix.asset_name }}-${{ env.VERSION }}.zip ${{ matrix.asset_name }}-${{ env.VERSION }}
        shell: bash
      
      # Upload artifacts for all builds
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}-${{ env.VERSION }}
          path: ${{ matrix.asset_name }}-${{ env.VERSION }}.zip
      
  # Create release when a tag is pushed
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Get version
        id: get_version
        run: |
          # Always get version from pubspec.yaml as the primary source
          VERSION=$(grep -m 1 'version:' pubspec.yaml | awk '{print $2}' | tr -d "'\"")
          echo "Using version from pubspec.yaml: $VERSION"
          # Only for display purposes, show if tag version is different
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION=${TAG_VERSION#v}
            if [[ "$TAG_VERSION" != "$VERSION" ]]; then
              echo "Note: Tag version ($TAG_VERSION) differs from pubspec.yaml version ($VERSION)"
              echo "Using pubspec.yaml version for consistency with pub.dev"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            chromecast_dlna_finder_linux-${{ env.VERSION }}/chromecast_dlna_finder_linux-${{ env.VERSION }}.zip
            chromecast_dlna_finder_macos-${{ env.VERSION }}/chromecast_dlna_finder_macos-${{ env.VERSION }}.zip
            chromecast_dlna_finder_windows-${{ env.VERSION }}/chromecast_dlna_finder_windows-${{ env.VERSION }}.zip
          draft: false
          prerelease: false
          name: Release ${{ env.VERSION }}
          body: |
            # Chromecast DLNA Finder v${{ env.VERSION }}
            
            Cross-platform binaries for the Chromecast DLNA Finder tool.
            
            ## Installation
            
            Download the appropriate zip file for your platform, extract it, and run the executable.
            
            ## Included Files
            
            - Executable binary for your platform
            - Localization resource files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
